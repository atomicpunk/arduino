/*
 * Copyright 2012 Todd Brandt <tebrandt@frontier.com>
 *
 * This program is free software; you may redistribute it and/or modify it
 * under the same terms as Perl itself.
 *    trancearoundtheworld mp3 archive sync utility
 *    Copyright (C) 2012 Todd Brandt <tebrandt@frontier.com>
 *
 *    This program is free software; you can redistribute it and/or modify
 *    it under the terms of the GNU General Public License as published by
 *    the Free Software Foundation; either version 2 of the License, or
 *    (at your option) any later version.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    GNU General Public License for more details.
 *
 *    You should have received a copy of the GNU General Public License along
 *    with this program; if not, write to the Free Software Foundation, Inc.,
 *    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */


#include <avr/pgmspace.h>
#define CHRISTMAS 1

#ifdef BOARD_ATMEGA
#define DATA_1 PORTF   // DATA 1    // for ATMEGA
#define DATA_0 PORTF   // DATA 0    // for ATMEGA
#define STRIP_PINOUT (DDRF=0xFF)  // for ATMEGA
#define NUM_STRIPS 2
#define SENDSTRIP1 send_strip2
#define SENDSTRIP2 send_strip1
#endif
#ifdef BOARD_UNO
#define DATA_1 PORTC   // DATA 1    // for UNO
#define DATA_0 PORTC   // DATA 0    // for UNO
#define STRIP_PINOUT (DDRC=0xFF)    // for UNO
#define NUM_STRIPS 2
#define SENDSTRIP1 send_strip2
#define SENDSTRIP2 send_strip2
#endif

#if THANKSGIVING
const int pattern_size = 10;
PROGMEM const unsigned long pattern[pattern_size][10]={
  { 0xff7f00,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0xff7f00 },
  { 0x5f2f00,0xff7f00,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0xff7f00,0x5f2f00 },
  { 0x1f0f00,0x5f2f00,0xff7f00,0x000000,0x000000,0x000000,0x000000,0xff7f00,0x5f2f00,0x1f0f00 },
  { 0x000000,0x1f0f00,0x5f2f00,0xff7f00,0x000000,0x000000,0xff7f00,0x5f2f00,0x1f0f00,0x000000 },
  { 0x000000,0x000000,0x1f0f00,0x5f2f00,0xff7f00,0xff7f00,0x5f2f00,0x1f0f00,0x000000,0x000000 },
  { 0x000000,0x000000,0x1f0f00,0x5f2f00,0xff7f00,0xff7f00,0x5f2f00,0x1f0f00,0x000000,0x000000 },
  { 0x000000,0x000000,0x000000,0xff7f00,0x5f2f00,0x5f2f00,0xff7f00,0x000000,0x000000,0x000000 },
  { 0x000000,0x000000,0xff7f00,0x5f2f00,0x1f0f00,0x1f0f00,0x5f2f00,0xff7f00,0x000000,0x000000 },
  { 0x000000,0xff7f00,0x5f2f00,0x1f0f00,0x000000,0x000000,0x1f0f00,0x5f2f00,0xff7f00,0x000000 },
  { 0xff7f00,0x5f2f00,0x1f0f00,0x000000,0x000000,0x000000,0x000000,0x1f0f00,0x5f2f00,0xff7f00 },
};
#elif CHRISTMAS
const int pattern_size = 80;
PROGMEM const unsigned long pattern[pattern_size][10]={
  { 0xff0000,0x00df00,0x9f0000,0x005f00,0x1f0000,0x000700,0x1f0000,0x005f00,0x9f0000,0x00df00 },
  { 0x00df00,0xff0000,0x00df00,0x9f0000,0x005f00,0x1f0000,0x000700,0x1f0000,0x005f00,0x9f0000 },
  { 0x9f0000,0x00df00,0xff0000,0x00df00,0x9f0000,0x005f00,0x1f0000,0x000700,0x1f0000,0x005f00 },
  { 0x005f00,0x9f0000,0x00df00,0xff0000,0x00df00,0x9f0000,0x005f00,0x1f0000,0x000700,0x1f0000 },
  { 0x1f0000,0x005f00,0x9f0000,0x00df00,0xff0000,0x00df00,0x9f0000,0x005f00,0x1f0000,0x000700 },
  { 0x000700,0x1f0000,0x005f00,0x9f0000,0x00df00,0xff0000,0x00df00,0x9f0000,0x005f00,0x1f0000 },
  { 0x1f0000,0x000700,0x1f0000,0x005f00,0x9f0000,0x00df00,0xff0000,0x00df00,0x9f0000,0x005f00 },
  { 0x005f00,0x1f0000,0x000700,0x1f0000,0x005f00,0x9f0000,0x00df00,0xff0000,0x00df00,0x9f0000 },
  { 0x9f0000,0x005f00,0x1f0000,0x000700,0x1f0000,0x005f00,0x9f0000,0x00df00,0xff0000,0x00df00 },
  { 0x00df00,0x9f0000,0x005f00,0x1f0000,0x000700,0x1f0000,0x005f00,0x9f0000,0x00df00,0xff0000 },
  { 0xff0000,0x00df00,0x9f0000,0x005f00,0x1f0000,0x000700,0x1f0000,0x005f00,0x9f0000,0x00df00 },
  { 0x00df00,0xff0000,0x00df00,0x9f0000,0x005f00,0x1f0000,0x000700,0x1f0000,0x005f00,0x9f0000 },
  { 0x9f0000,0x00df00,0xff0000,0x00df00,0x9f0000,0x005f00,0x1f0000,0x000700,0x1f0000,0x005f00 },
  { 0x005f00,0x9f0000,0x00df00,0xff0000,0x00df00,0x9f0000,0x005f00,0x1f0000,0x000700,0x1f0000 },
  { 0x1f0000,0x005f00,0x9f0000,0x00df00,0xff0000,0x00df00,0x9f0000,0x005f00,0x1f0000,0x000700 },
  { 0x000700,0x1f0000,0x005f00,0x9f0000,0x00df00,0xff0000,0x00df00,0x9f0000,0x005f00,0x1f0000 },
  { 0x1f0000,0x000700,0x1f0000,0x005f00,0x9f0000,0x00df00,0xff0000,0x00df00,0x9f0000,0x005f00 },
  { 0x005f00,0x1f0000,0x000700,0x1f0000,0x005f00,0x9f0000,0x00df00,0xff0000,0x00df00,0x9f0000 },
  { 0x9f0000,0x005f00,0x1f0000,0x000700,0x1f0000,0x005f00,0x9f0000,0x00df00,0xff0000,0x00df00 },
  { 0x00df00,0x9f0000,0x005f00,0x1f0000,0x000700,0x1f0000,0x005f00,0x9f0000,0x00df00,0xff0000 },

  { 0xff0000,0x00df00,0x9f0000,0x005f00,0x1f0000,0x000700,0x1f0000,0x005f00,0x9f0000,0x00df00 },
  { 0x00df00,0xff0000,0x00df00,0x9f0000,0x005f00,0x1f0000,0x000700,0x1f0000,0x005f00,0x9f0000 },
  { 0x9f0000,0x00df00,0xff0000,0x00df00,0x9f0000,0x005f00,0x1f0000,0x000700,0x1f0000,0x005f00 },
  { 0x005f00,0x9f0000,0x00df00,0xff0000,0x00df00,0x9f0000,0x005f00,0x1f0000,0x000700,0x1f0000 },
  { 0x1f0000,0x005f00,0x9f0000,0x00df00,0xff0000,0x00df00,0x9f0000,0x005f00,0x1f0000,0x000700 },
  { 0x000700,0x1f0000,0x005f00,0x9f0000,0x00df00,0xff0000,0x00df00,0x9f0000,0x005f00,0x1f0000 },
  { 0x1f0000,0x000700,0x1f0000,0x005f00,0x9f0000,0x00df00,0xff0000,0x00df00,0x9f0000,0x005f00 },
  { 0x005f00,0x1f0000,0x000700,0x1f0000,0x005f00,0x9f0000,0x00df00,0xff0000,0x00df00,0x9f0000 },
  { 0x9f0000,0x005f00,0x1f0000,0x000700,0x1f0000,0x005f00,0x9f0000,0x00df00,0xff0000,0x00df00 },
  { 0x00df00,0x9f0000,0x005f00,0x1f0000,0x000700,0x1f0000,0x005f00,0x9f0000,0x00df00,0xff0000 },
  { 0xff0000,0x00df00,0x9f0000,0x005f00,0x1f0000,0x000700,0x1f0000,0x005f00,0x9f0000,0x00df00 },
  { 0x00df00,0xff0000,0x00df00,0x9f0000,0x005f00,0x1f0000,0x000700,0x1f0000,0x005f00,0x9f0000 },
  { 0x9f0000,0x00df00,0xff0000,0x00df00,0x9f0000,0x005f00,0x1f0000,0x000700,0x1f0000,0x005f00 },
  { 0x005f00,0x9f0000,0x00df00,0xff0000,0x00df00,0x9f0000,0x005f00,0x1f0000,0x000700,0x1f0000 },
  { 0x1f0000,0x005f00,0x9f0000,0x00df00,0xff0000,0x00df00,0x9f0000,0x005f00,0x1f0000,0x000700 },
  { 0x000700,0x1f0000,0x005f00,0x9f0000,0x00df00,0xff0000,0x00df00,0x9f0000,0x005f00,0x1f0000 },
  { 0x1f0000,0x000700,0x1f0000,0x005f00,0x9f0000,0x00df00,0xff0000,0x00df00,0x9f0000,0x005f00 },
  { 0x005f00,0x1f0000,0x000700,0x1f0000,0x005f00,0x9f0000,0x00df00,0xff0000,0x00df00,0x9f0000 },
  { 0x9f0000,0x005f00,0x1f0000,0x000700,0x1f0000,0x005f00,0x9f0000,0x00df00,0xff0000,0x00df00 },
  { 0x00df00,0x9f0000,0x005f00,0x1f0000,0x000700,0x1f0000,0x005f00,0x9f0000,0x00df00,0xff0000 },

  { 0xff0000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0xff0000 },
  { 0x440000,0xff0000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0xff0000,0x440000 },
  { 0x110000,0x440000,0xff0000,0x000000,0x000000,0x000000,0x000000,0xff0000,0x440000,0x110000 },
  { 0x000000,0x110000,0x440000,0xff0000,0x000000,0x000000,0xff0000,0x440000,0x110000,0x000000 },
  { 0x000000,0x000000,0x110000,0x440000,0xff0000,0xff0000,0x440000,0x110000,0x000000,0x000000 },
  { 0x000000,0x000000,0x110000,0x440000,0xff0000,0xff0000,0x440000,0x110000,0x000000,0x000000 },
  { 0x000000,0x000000,0x000000,0xff0000,0x440000,0x440000,0xff0000,0x000000,0x000000,0x000000 },
  { 0x000000,0x000000,0xff0000,0x440000,0x110000,0x110000,0x440000,0xff0000,0x000000,0x000000 },
  { 0x000000,0xff0000,0x440000,0x110000,0x000000,0x000000,0x110000,0x440000,0xff0000,0x000000 },
  { 0xff0000,0x440000,0x110000,0x000000,0x000000,0x000000,0x000000,0x110000,0x440000,0xff0000 },
  { 0x00ff00,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x00ff00 },
  { 0x004400,0x00ff00,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x00ff00,0x004400 },
  { 0x001100,0x004400,0x00ff00,0x000000,0x000000,0x000000,0x000000,0x00ff00,0x004400,0x001100 },
  { 0x000000,0x001100,0x004400,0x00ff00,0x000000,0x000000,0x00ff00,0x004400,0x001100,0x000000 },
  { 0x000000,0x000000,0x001100,0x004400,0x00ff00,0x00ff00,0x004400,0x001100,0x000000,0x000000 },
  { 0x000000,0x000000,0x001100,0x004400,0x00ff00,0x00ff00,0x004400,0x001100,0x000000,0x000000 },
  { 0x000000,0x000000,0x000000,0x00ff00,0x004400,0x004400,0x00ff00,0x000000,0x000000,0x000000 },
  { 0x000000,0x000000,0x00ff00,0x004400,0x001100,0x001100,0x004400,0x00ff00,0x000000,0x000000 },
  { 0x000000,0x00ff00,0x004400,0x001100,0x000000,0x000000,0x001100,0x004400,0x00ff00,0x000000 },
  { 0x00ff00,0x004400,0x001100,0x000000,0x000000,0x000000,0x000000,0x001100,0x004400,0x00ff00 },

  { 0xff0000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0xff0000 },
  { 0x440000,0xff0000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0xff0000,0x440000 },
  { 0x110000,0x440000,0xff0000,0x000000,0x000000,0x000000,0x000000,0xff0000,0x440000,0x110000 },
  { 0x000000,0x110000,0x440000,0xff0000,0x000000,0x000000,0xff0000,0x440000,0x110000,0x000000 },
  { 0x000000,0x000000,0x110000,0x440000,0xff0000,0xff0000,0x440000,0x110000,0x000000,0x000000 },
  { 0x000000,0x000000,0x110000,0x440000,0xff0000,0xff0000,0x440000,0x110000,0x000000,0x000000 },
  { 0x000000,0x000000,0x000000,0xff0000,0x440000,0x440000,0xff0000,0x000000,0x000000,0x000000 },
  { 0x000000,0x000000,0xff0000,0x440000,0x110000,0x110000,0x440000,0xff0000,0x000000,0x000000 },
  { 0x000000,0xff0000,0x440000,0x110000,0x000000,0x000000,0x110000,0x440000,0xff0000,0x000000 },
  { 0xff0000,0x440000,0x110000,0x000000,0x000000,0x000000,0x000000,0x110000,0x440000,0xff0000 },
  { 0x00ff00,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x00ff00 },
  { 0x004400,0x00ff00,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x00ff00,0x004400 },
  { 0x001100,0x004400,0x00ff00,0x000000,0x000000,0x000000,0x000000,0x00ff00,0x004400,0x001100 },
  { 0x000000,0x001100,0x004400,0x00ff00,0x000000,0x000000,0x00ff00,0x004400,0x001100,0x000000 },
  { 0x000000,0x000000,0x001100,0x004400,0x00ff00,0x00ff00,0x004400,0x001100,0x000000,0x000000 },
  { 0x000000,0x000000,0x001100,0x004400,0x00ff00,0x00ff00,0x004400,0x001100,0x000000,0x000000 },
  { 0x000000,0x000000,0x000000,0x00ff00,0x004400,0x004400,0x00ff00,0x000000,0x000000,0x000000 },
  { 0x000000,0x000000,0x00ff00,0x004400,0x001100,0x001100,0x004400,0x00ff00,0x000000,0x000000 },
  { 0x000000,0x00ff00,0x004400,0x001100,0x000000,0x000000,0x001100,0x004400,0x00ff00,0x000000 },
  { 0x00ff00,0x004400,0x001100,0x000000,0x000000,0x000000,0x000000,0x001100,0x004400,0x00ff00 },
};
#endif

/*******************************************************************************
 * Function Name  : send_strip
 * Description    : Transmit 24 pulse to LED strip
 *                  
 * Input          : 24-bit data for the strip
 *                  
 * Output         : None
 * Return         : None
 *******************************************************************************/
void send_strip2(uint32_t temp, uint32_t one, uint32_t zero)
{
  int i;
  unsigned long j=0x800000;
  unsigned long r = (temp >> 16) & 0xff, 
  g = (temp >> 8) & 0xff,
  b = (temp >> 0) & 0xff;
  unsigned long data = (g << 16) | (b << 8) | r;

  for (i=0;i<24;i++)
  {
    if (data & j)
    {
      DATA_1 |= one;
      __asm__("nop\n\t");
      __asm__("nop\n\t");
      __asm__("nop\n\t");
      __asm__("nop\n\t");
      __asm__("nop\n\t");
      __asm__("nop\n\t");
      __asm__("nop\n\t");
      __asm__("nop\n\t");
      __asm__("nop\n\t");    
      __asm__("nop\n\t");
      __asm__("nop\n\t");
      __asm__("nop\n\t");
      __asm__("nop\n\t");
      __asm__("nop\n\t");
      __asm__("nop\n\t");
      __asm__("nop\n\t");
      __asm__("nop\n\t");
      __asm__("nop\n\t");

      /*----------------------------*/
      __asm__("nop\n\t");
      __asm__("nop\n\t");
      __asm__("nop\n\t");
      __asm__("nop\n\t");
      __asm__("nop\n\t");  
      __asm__("nop\n\t");
      __asm__("nop\n\t");
      __asm__("nop\n\t");  
      __asm__("nop\n\t");  
      __asm__("nop\n\t");        
      /*----------------------------*/
      DATA_0 &= zero;
    }
    else
    {
      DATA_1 |= one;
      __asm__("nop\n\t");
      __asm__("nop\n\t");
      __asm__("nop\n\t");
      __asm__("nop\n\t");
      __asm__("nop\n\t");
      __asm__("nop\n\t");
      __asm__("nop\n\t");
      __asm__("nop\n\t");
      __asm__("nop\n\t");    
      DATA_0 &= zero;
      /*----------------------------*/
      __asm__("nop\n\t");
      __asm__("nop\n\t");
      __asm__("nop\n\t");      
      /*----------------------------*/
    }

    j>>=1;
  }
}

void send_strip1(uint32_t temp, uint32_t one, uint32_t zero)
{
  int i;
  unsigned long j=0x800000;
  unsigned long r = (temp >> 16) & 0xff, 
  g = (temp >> 8) & 0xff,
  b = (temp >> 0) & 0xff;
  unsigned long data = (r << 16) | (b << 8) | g;

  for (i=0;i<24;i++)
  {
    if (data & j)
    {
      DATA_1 |= one;
      __asm__("nop\n\t");
      __asm__("nop\n\t");
      __asm__("nop\n\t");
      __asm__("nop\n\t");
      __asm__("nop\n\t");
      __asm__("nop\n\t");
      __asm__("nop\n\t");
      __asm__("nop\n\t");
      __asm__("nop\n\t");    
      __asm__("nop\n\t");
      __asm__("nop\n\t");
      __asm__("nop\n\t");
      __asm__("nop\n\t");
      __asm__("nop\n\t");
      __asm__("nop\n\t");
      __asm__("nop\n\t");
      __asm__("nop\n\t");
      __asm__("nop\n\t");

      /*----------------------------*/
      __asm__("nop\n\t");
      __asm__("nop\n\t");
      __asm__("nop\n\t");
      __asm__("nop\n\t");
      __asm__("nop\n\t");  
      __asm__("nop\n\t");
      __asm__("nop\n\t");
      __asm__("nop\n\t");  
      __asm__("nop\n\t");  
      __asm__("nop\n\t");        
      /*----------------------------*/
      DATA_0 &= zero;
    }
    else
    {
      DATA_1 |= one;
      __asm__("nop\n\t");
      __asm__("nop\n\t");
      __asm__("nop\n\t");
      __asm__("nop\n\t");
      __asm__("nop\n\t");
      __asm__("nop\n\t");
      __asm__("nop\n\t");
      __asm__("nop\n\t");
      __asm__("nop\n\t");    
      DATA_0 &= zero;
      /*----------------------------*/
      __asm__("nop\n\t");
      __asm__("nop\n\t");
      __asm__("nop\n\t");      
      /*----------------------------*/
    }

    j>>=1;
  }
}

void send_pattern_line(const unsigned long line[10])
{
  int i;
  uint32_t data;

  noInterrupts();
  for (i=0;i<10;i++)
  {
    data=pgm_read_dword_near(&line[i]);
    SENDSTRIP1(data, 0x01, 0xFE);
  }
#if NUM_STRIPS > 1
  for (i=0;i<10;i++)
  {
    data=pgm_read_dword_near(&line[i]);
    SENDSTRIP2(data, 0x02, 0xFD);
  }
#endif
  interrupts();
}

/*******************************************************************************
 * Function Name  : reset_strip
 * Description    : Send reset pulse to reset all color of the strip
 *                  
 * Input          : None
 *                  
 * Output         : None
 * Return         : None
 *******************************************************************************/
void reset_strip(uint32_t zero)
{
  DATA_0 &= zero;
  delayMicroseconds(20);
}

void setupLedStrip() {
  STRIP_PINOUT;        // set output pin - DEBUG: should auto detect which mother board for use
  reset_strip(0xFE);
#if NUM_STRIPS > 1
  reset_strip(0xFD);
#endif
}
